PLAN  PLAN
PLAN  PLAN
PLAN  PLAN


Could downsample to half the framerate, the nyquest freq says that need to sample at twice the freq as the signal. It is fast to move at even 4hz.


DOCKERFILE (start with CPU version)

CPU vs NVIDIA versions

install all the prereqs
actually install openpose into PATH
then get the python versions running
write a wrapper that can output the data as a numpy blob

Also set up the repository so that the python dispatcher can run
Have that working to be able to save into a path

Then setup to run on google cloud
figure out how to write to the buckets

Run everything for all my vids



TODO
 
 - Get express to work with the openpose
 - create test video

 - Put on path
   - ln -sf $(pwd)/build/examples/openpose/openpose.bin /usr/bin/openpose

 - ingest videos
   - describe them
   - upload them into buckets
 - get expressome onto gcloud
   - create Dockerfile
   - mount the bucket for read and write


 - USE colab
 - Tensorboard - https://stackoverflow.com/questions/47818822/can-i-use-tensorboard-with-google-colab

 - create a script that uses Gifify, something that can work with the output of 
 - Gifify - https://askubuntu.com/questions/648603/how-to-create-an-animated-gif-from-mp4-video-via-command-line



RESOURCES    RESOURCES    RESOURCES
RESOURCES    RESOURCES    RESOURCES
RESOURCES    RESOURCES    RESOURCES

GPU on google cloud with normal ubuntu
https://hackernoon.com/launch-a-gpu-backed-google-compute-engine-instance-and-setup-tensorflow-keras-and-jupyter-902369ed5272


troubleshooting my docker on gcloud



DOCKER with the x11 gui
https://forums.docker.com/t/how-to-run-gui-apps-in-containiers-in-osx-docker-for-mac/17797/7

video on setup
https://www.youtube.com/watch?v=abEf3wQJBmE


MOUNT A BUCKET ONTO THE FILESYSTEM
https://cloud.google.com/storage/docs/gcs-fuse




ACTUALLY can't use app engine flex
GPUs are not enabled according to stackoverflow
Here is how they are set up
https://graysonkoonce.com/deploying-to-google-app-engine-using-docker/

THE WAY TO DO THE DOCKER STUFF
"CUDA enabled docker container"
https://medium.com/google-cloud/containerized-jupyter-notebooks-on-gpu-on-google-cloud-8e86ef7f31e9

This is the way to do it.
I will have a docker container and the script to set up all the gcloud stuff
then run the script, install the container and then ssh into it and run the test video processing

first get the local version to process a short video



RUN       RUN       RUN
RUN       RUN       RUN
RUN       RUN       RUN

./ubuntu/install_cmake.sh
mkdir build && cd build
cmake -DGPU_MODE=CPU_ONLY ..
make -j `nproc`

./build/examples/tutorial_wrapper/6_user_asynchronous_output.bin --logging_level 0 --image_dir /host/test_images/my --write_images /host/test_images/out_openpose/img --write_keypoint_json /host/test_images/out_openpose/json --net_resolution 656x368

./build/examples/tutorial_wrapper/1_user_synchronous_postprocessing.bin --display 0 --net_resolution 656x368 --image_dir /host/test_images/my --write_images /host/test_images/out_openpose/img --write_json /host/test_images/out_openpose/json --logging_level 1 

./build/examples/tutorial_wrapper/1_user_synchronous_postprocessing.bin --display 0 --net_resolution 656x368 --image_dir /host/test_images/my --write_images /host/test_images/out_openpose/img --write_json /host/test_images/out_openpose/json --logging_level 0

WORKS!

./build/examples/openpose/openpose.bin --display 0 --net_resolution 656x368 --image_dir /host/test_images/my --write_images /host/test_images/out_openpose/img --write_json /host/test_images/out_openpose/json --logging_level 0

WORKS with the openpose.bin using the same args!





